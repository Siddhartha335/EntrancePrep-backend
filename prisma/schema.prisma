// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           String           @id @default(uuid())
  username          String           @unique
  email             String           @unique
  password          String
  isAdmin           Boolean          @default(false)
  isActive          Boolean          @default(true)
  registration_date DateTime         @default(now())
  last_login        DateTime?
  user_tests        User_Test[]
  user_answers      User_Answer[]
  recommendations   Recommendation[] @relation("UserRecommendations") // Reverse relation for recommendations

  @@map("users")
}

enum ScheduleType {
  FIXED
  FLEXIBLE
}

model Test {
  test_id          Int             @id @default(autoincrement())
  name             String
  description      String?
  isActive         Boolean          @default(true)
  duration         Int             // Time in minutes
  isAdaptive       Boolean          @default(false)
  hasNegativeMarking Boolean        @default(false)
  category_id      Int
  type             String          // The type of the test (e.g., "Mock", "Final")
  is_question_bank Boolean          @default(false)
  category         Category        @relation(fields: [category_id], references: [category_id], name: "CategoryTests") // Reverse relation for category
  test_questions   Test_Question[]
  user_tests       User_Test[]
  question_banks   QuestionBank[]  @relation("TestQuestionBanks") // Corrected relation name

  @@map("tests")
}

model Category {
  category_id        Int              @id @default(autoincrement())
  name               String
  parent_category_id Int?             // Nullable, Foreign Key for subcategories
  isActive           Boolean          @default(true)
  parent_category    Category?        @relation("CategoryParent", fields: [parent_category_id], references: [category_id])
  subcategories      Category[]       @relation("CategoryParent")
  questions          Question[]
  tests              Test[]           @relation("CategoryTests") // Reverse relation for tests
  recommendations    Recommendation[] @relation("CategoryRecommendations") // Reverse relation for recommendations
  question_banks     QuestionBankCategory[] @relation("CategoryQuestionBanks")  // Many-to-many with QuestionBank

  @@map("categories")
}

model Question {
  question_id      Int           @id @default(autoincrement())
  question_text    String        // The question text
  category_id      Int
  difficulty_level String?       // Difficulty level (e.g., "Easy", "Medium", "Hard")
  question_type    String        // Type of the question (e.g., "MCQ", "True/False")
  answers          String[]      // Array of answers (4 options)
  right_answer     String        // Correct answer
  explanation      String?       // Explanation for the answer (optional)
  marks_of_question Int?         // Marks for the question
  has_explanation  Boolean       // Whether there's an explanation available for the question
  time_limit       Int?          // Optional time limit for the question
  user_answers     User_Answer[] @relation("QuestionAnswers") // Add reverse relation name

  category         Category      @relation(fields: [category_id], references: [category_id])
  test_questions   Test_Question[]
  question_banks   QuestionBankQuestion[] @relation("QuestionQuestionBanks") // Many-to-many with QuestionBank

  @@map("questions")
}

model QuestionBank {
  question_bank_id Int         @id @default(autoincrement())
  schedule_type    ScheduleType // Enum type for FIXED or FLEXIBLE
  test_id          Int         // Foreign key to Test
  test             Test        @relation(fields: [test_id], references: [test_id], name: "TestQuestionBanks")
  
  categories       QuestionBankCategory[]
  questions        QuestionBankQuestion[]

  @@map("question_banks")
}

// Junction table to link QuestionBank with Categories
model QuestionBankCategory {
  id               Int @id @default(autoincrement())
  question_bank_id Int
  category_id      Int
  question_bank    QuestionBank @relation(fields: [question_bank_id], references: [question_bank_id])
  category         Category     @relation(fields: [category_id], references: [category_id], name: "CategoryQuestionBanks")
  
  @@map("question_bank_categories")
}

// Junction table to link QuestionBank with Questions
model QuestionBankQuestion {
  id               Int @id @default(autoincrement())
  question_bank_id Int
  question_id      Int
  question_bank    QuestionBank @relation(fields: [question_bank_id], references: [question_bank_id])
  question         Question     @relation(fields: [question_id], references: [question_id],name: "QuestionQuestionBanks")
  
  @@map("question_bank_questions")
}

model Test_Question {
  test_id     Int
  question_id Int
  sequence    Int      @default(autoincrement())
  test        Test     @relation(fields: [test_id], references: [test_id])
  question    Question @relation(fields: [question_id], references: [question_id])

  @@id([test_id, question_id]) // Composite primary key for test_id and question_id
  @@map("test_questions")
}

model User_Test {
  user_test_id Int           @id @default(autoincrement())
  user_id      String // Change from Int to String (UUID)
  test_id      Int
  start_time   DateTime      @default(now())
  end_time     DateTime?
  score        Float?
  status       TestStatus    @default(IN_PROGRESS)
  user         User          @relation(fields: [user_id], references: [user_id])
  test         Test          @relation(fields: [test_id], references: [test_id])
  user_answers User_Answer[]

  @@map("user_tests")
}

model User_Answer {
  user_answer_id  Int       @id @default(autoincrement())
  user_test_id    Int
  question_id     Int
  selected_answer String
  is_correct      Boolean
  user_test       User_Test @relation(fields: [user_test_id], references: [user_test_id])
  question        Question  @relation(fields: [question_id], references: [question_id], name: "QuestionAnswers")

  user_id String // Change from Int to String (UUID)
  user    User   @relation(fields: [user_id], references: [user_id])

  @@map("user_answers")
}

model Recommendation {
  recommendation_id Int      @id @default(autoincrement())
  user_id           String // Change from Int to String (UUID)
  category_id       Int
  recommended_on    DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [user_id], name: "UserRecommendations")
  category          Category @relation(fields: [category_id], references: [category_id], name: "CategoryRecommendations")

  @@map("recommendations")
}

enum TestStatus {
  COMPLETED
  IN_PROGRESS
}
